searchState.loadedDescShard("crossplatform_path", 0, "crossplatform_path\nCrossPathBuf stores Path in a Neutral Crossplatform …\nContains the error value\nAll possible library errors for <code>thiserror</code>.\nContains the success value\ncrossplatform_path::Result\nReturns a CrossPathBuf with one trailing end slash.\nReturns a CrossPathBuf with one leading start slash.\nReturns the crossplatform str for use in Display and store …\nRecursively create this path as directory and all of its …\nRecursively create the parent directory of a file and all …\nPath stored in a Neutral Crossplatform format.\nReturns <code>true</code> if the path points at an existing entity.\nExtracts the extension (without the leading dot), if …\nReturns the final component of the Path, if there is one.\nExtracts the stem (non-extension) portion of file_name …\nMethod display() is used in format!(“{}”).\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nJoins two paths and returns a new CrossPathBuf to allow …\nCreates a new CrossPathBuf from &amp;str.  \\\nReturns the Path without its final component, if there is …\nReads the entire contents of a file into a string.  \\\nConverts crossplatform path into current OS path.  \\\nConverts crossplatform path into Linux path.  \\\nConverts crossplatform path into Windows path.  \\\nReturns a CrossPathBuf without trailing end slash …\nReturns a CrossPathBuf without leading start slash …\nWrites a slice as the entire contents of a file.  \\")